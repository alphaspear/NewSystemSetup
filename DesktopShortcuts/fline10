package com.aexp.lumi.poller.datasource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.aexp.lumi.poller.configs.AppConfigs;
import com.aexp.lumi.poller.configs.AppConfigs.SftpConfig;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Value;

import java.util.Vector;

@Component
public class SFTPPoller implements Poller {
    static Logger logger = LogManager.getLogger(SFTPPoller.class);

    private String host;
    private int port;
    private String user;
    private String password;
    private int sessionTimeout;
    private int channelTimeout;
    private final String directory;

    private Session session;
    private ChannelSftp sftpChannel;

    @Autowired
    public SFTPPoller(Environment env, @Value("${sftp.directory}") String directory) {
        initializeSftpConfig(env);
        this.directory = directory;
    }

    private void initializeSftpConfig(Environment env) {
        // Initialize SFTP configuration using Environment
        this.host = env.getProperty("sftp.host");
        this.port = env.getProperty("sftp.port", Integer.class, 22); // Default to port 22 if not specified
        this.user = env.getProperty("sftp.user");
        this.password = env.getProperty("sftp.password");
        this.sessionTimeout = env.getProperty("sftp.sessionTimeout", Integer.class, 10000); // Default session timeout
        this.channelTimeout = env.getProperty("sftp.channelTimeout", Integer.class, 5000); // Default channel timeout
    }

    @Override
    public void poll() {
        try {
            connect();
            logger.info("Connected to SFTP server: " + host);

            listFiles();

            disconnect();
            logger.info("Disconnected from SFTP server.");
        } catch (Exception e) {
            logger.error("Error during SFTP polling", e);
        }
    }

    @Override
    public void stop() {
        logger.info("Stopping SFTP polling.");
        disconnect();
    }

    private void connect() throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(user, host, port);
        session.setPassword(password);

        java.util.Properties config = new java.util.Properties();
        config.put("StrictHostKeyChecking", "no");
        session.setConfig(config);

        session.connect(sessionTimeout);
        Channel channel = session.openChannel("sftp");
        channel.connect(channelTimeout);
        sftpChannel = (ChannelSftp) channel;
    }

    private void listFiles() {
        try {
            sftpChannel.cd(directory);
            Vector<ChannelSftp.LsEntry> fileList = sftpChannel.ls(".");

            for (ChannelSftp.LsEntry entry : fileList) {
                if (!entry.getAttrs().isDir()) {
                    logger.info("Found file: " + entry.getFilename());
                }
            }
        } catch (SftpException e) {
            logger.error("Failed to list files in directory: " + directory, e);
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
    }
}
