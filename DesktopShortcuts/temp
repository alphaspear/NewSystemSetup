import psycopg2
from psycopg2.extras import DictCursor

# Connection details for on-prem PostgreSQL
onprem_conn_info = {
    'host': 'onprem_host',
    'database': 'onprem_database',
    'user': 'onprem_user',
    'password': 'onprem_password'
}

# Connection details for Cloud SQL PostgreSQL
cloudsql_conn_info = {
    'host': 'cloudsql_host',
    'database': 'cloudsql_database',
    'user': 'cloudsql_user',
    'password': 'cloudsql_password'
}

def migrate_data():
    try:
        # Connect to on-prem PostgreSQL
        onprem_conn = psycopg2.connect(**onprem_conn_info)
        onprem_cursor = onprem_conn.cursor(cursor_factory=DictCursor)

        # Connect to Cloud SQL PostgreSQL
        cloudsql_conn = psycopg2.connect(**cloudsql_conn_info)
        cloudsql_cursor = cloudsql_conn.cursor()

        # Fetch data from the on-prem table
        onprem_cursor.execute("SELECT * FROM lumi_poller.poller_job_config")
        rows = onprem_cursor.fetchall()

        # Transform and insert data into Cloud SQL
        for row in rows:
            insert_query = """
                INSERT INTO public.poller_job_config (
                    poller_id, server_profile_id, parent_dataset_id, dataset_id, 
                    parent_appflow_id, pipeline_id, pipeline_name, source_feed_name, 
                    data_file_name_regex, control_file_name_regex, control_file_info, 
                    file_retrieve_protocol, server_name, server_user_id, server_password, 
                    source_system_name, source_system_type, file_location_path, 
                    cron_expression, region_code, last_polled_ts, decommission_flag, 
                    create_ts, last_update_ts, safe_name, key_name
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 
                          %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (poller_id) DO NOTHING;
            """

            # Map the on-prem columns to Cloud SQL columns
            cloudsql_cursor.execute(insert_query, (
                row['poller_id'], row['serv_prfl_id'], row['parnt_dataset_id'], row['dataset_id'], 
                row['parnt_appl_flow_id'], row['ppln_id'], row['ppln_nm'], row['srce_feed_nm'], 
                row['da_fl_nm_regex_tx'], row['cntl_fl_nm_regex_tx'], row['cntl_fl_info_tx'], 
                row['fl_rtrv_prtcl_ds'], row['serv_nm'], row['serv_user_id'], row['serv_pswd_tx'], 
                row['srce_sys_nm'], row['srce_sys_type_ds'], row['fl_locat_path_tx'], 
                row['cron_exp_tx'], row['rgn_cd'], row['lst_polled_ts'], row['task_decom_in'], 
                row['creat_ts'], row['lst_updt_ts'], None, None
            ))

        # Commit the changes to the Cloud SQL instance
        cloudsql_conn.commit()

    except Exception as e:
        print(f"Error: {e}")
        if cloudsql_conn:
            cloudsql_conn.rollback()
    finally:
        if onprem_cursor:
            onprem_cursor.close()
        if cloudsql_cursor:
            cloudsql_cursor.close()
        if onprem_conn:
            onprem_conn.close()
        if cloudsql_conn:
            cloudsql_conn.close()

if __name__ == '__main__':
    migrate_data()
